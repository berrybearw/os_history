### monitor tool config ### 
#使用預設郵箱寄信請填"no"
#自行設定寄件郵箱請設"yes"
usr_set="no"

if [ "$TEMPDIR" == "" ] ; then
   export TEMPDIR='/u1/etc/tmp'
fi

##################################################
#####===uer_set設定yes請設定底下資訊===###########
##################################################

#請輸入 mail server
#mail_ser="smtp.aliyun.com"
mail_ser="140.205.94.10"

#smtp寄件認證，預設為"Y"郵件主機不需認証請改"N"
ck_auth="Y"

#請輸入登入主機帳號，EX. 1234@XXX.com
mail_from="t100_digiwin_default@aliyun.com"

#請輸入寄件人登入郵件主機認證密碼
mail_pass="dcms@123"

#請輸入smtp port號
smtp_port="25"

#請輸入寄件人郵件地址
mail_who="t100_digiwin_default@aliyun.com"

##################################################
##############===以下設定需修改===################
##################################################

#輸入收件人郵件地址以 ";" 分隔
#mail_to="mail1@digiwin.com;mail2@digiwin.com"
#mail_to="yijuwang@digiwin.com"
#mail_to='berrybearw@digiwin.com;sinwer@digiwin.com;elle@digiwin.com;alexlin@digiwin.com'
mail_to='berrybearw@digiwin.com;elle@digiwin.com'

#請輸入郵件主旨
#mail_sub="[警告] 測試 T100 ERP Server Alert"
mail_sub="T100 ERP Server Alert"

#du password
sqlpass="du"

#########################################################################################
#檢查項目 (s)
#########################################################################################

#tmon 模式 ( 設定 Y 模式為測試 script )
mode_test="N"

#是否檢查cpu 負載 開啟為"1"，關閉為"0"
#cpu_lim為告警水位，CPU使用量超過幾%，才開始告警
cc="1"

cpu_lim="80"

#是否檢查記憶體 開啟為"1"，關閉為"0"
#mem_lim為告警水位，CPU使用量超過幾%，才開始告警
mem="1"

mem_lim="80"

#是否檢查磁碟空間 開啟為"1"，關閉為"0"
du="1"

#是否檢查運行超過一天的程式
psk="1"

#是否檢查process記憶體使用量 開啟為"1"，關閉為"0"
psmem="1"

#是否檢查process 執行時間 開啟為"1"，關閉為"0"
ps_cputime="1"

#是否檢查 log 異常訊息紀錄 開啟為"1"，關閉為"0"
err="1" 

#請輸入告警水位
#是否檢查表空間 開啟為"1"，關閉為"0"
tbk="1"

#是否檢查暫存表空間 開啟為"1"，關閉為"0"
ttbk="1"

#例如表空間使用超過80%就告警，請輸入80
#限輸入10、20、30、40、50、60、70、80、90
lim="80"



#是否檢查undo空間 開啟為"1"，關閉為"0"
undok="1"

#undo空間告警物件大小(測試中請勿修改)
oto="20"

#是否檢查lock wait事件 開啟為"1"，關閉為"0"
lk="1"
#lock檢查秒數設定
l_sec="10"




#是否檢查REDOLOG 切換次數 開啟為"1"，關閉為"0"
rd="1"

#是否檢查ORACLE TEMP空間 開啟為"1"，關閉為"0"
tempk="1"


#########################################################################################
################################===頻 率 控 管 機 制===##################################
#########################################################################################
#分別設定檢查『Lock Wait』,『CPU負載』,『REDOLOG切換次數』,『表空間』,『temptabs空間』,
#『undo空間』,『temp表空間』,『磁碟空間』,『程式運行』 執行頻率控管設定
#執行設定分別為以下四種設定方式：
#一、每月執行一次：每個月固定第x個星期x執行一次
#    設定每月第幾週執行(設定值：1~4；非每月執行請將設定為0) ex: w_of_m_cpu_set="1"
#    設定星期幾執行(含時間) 設定值：星期(Sun,Mon,Tue,Wed,Thu,Fri,Sat)；小時(00~23)；分鐘(00~59)
#    ex:on_cpu_set="Sun0000"
#
#二、每週執行一次：每週固定幾時幾分執行
#    設定值：星期(Sun,Mon,Tue,Wed,Thu,Fri,Sat)；小時(00~23)；分鐘(00~59)
#    ex：on_cpu_set="Sun0000"
#
#三、每日執行一次：每日固定幾時幾分執行
#    設定值：小時(00~23)；分鐘(00~59)
#    ex：on_cpu_set="0000"
#
#四、每小時執行一次：每小時幾分執行
#    設定值：分鐘(00~59)
#    ex：on_cpu_set="00"
#
#五、每幾小時執行一次
#

# what time is it 
chk_hour=`date +"%H"`
chk_min=`date +"%M"`

set_file="/u3/bin/tmon/tmon_time.txt"

#新增方式請使用
#xxxxx_time 名稱結尾要用 _time 
#有多個請結尾為 _2time 以此類推設定
#範例 
#chk_mem 設定名稱為 chk_mem_time
#chk_ps 有 2 個檢查項目要設定頻率
#chk_ps_time
#chk_ps_2time
#
#頻率設定方式
#chk_mem_time : x x x x x      5個為 x           不啟動
#chk_mem_time : 30 12 x x x         12 : 30      啟動
#chk_mem_time : x/30 x x x x   每   30 min       啟動
#chk_mem_time : x x/5 x x x    每   5 hr         啟動
#chk_mem_time : x/30 x/5 x x x 每   5 hr 的 30,00 min  啟動


echo "

#tmon 清理
tmon_clean_time : 30 12 x x x

#重要程序存活
chk_aliv_time : x/1 x x x x

#超過一天程序
chk_ps_time   : 00 14 x x x
chk_ps_2time  : 00 x/1 x x x

#記憶體頻率
chk_mem_time  : x/10 x x x x
chk_mem_2time : x/10 x x x x

#CPU 頻率
chk_cpu_time  : x/10 x x x x

#主機磁碟空間
chk_du_time   : x/30 x x x x 

#檢查 error log 
#genero 15575
chk_err_time  : x x x x x
#genero 6088
chk_err_2time : x/10 x x x x

#檢查排程狀態
chk_cron_time : 00 12 x x x 

#檢查授權狀態
chk_lic2_time : x/1 x x x x

#檢查 table lock 
chk_lock_time : x/10 x x x x

#檢查程序使用 cpu 
chk_ps_cputime_time : x/10 x x x x 

#檢查程序使用 mem 
chk_psmem_time : x/10 x x x x 

#檢查 redo 
chk_redosd_time : x/30 x x x x 
chk_redosw_time : x/30 x x x x 

#檢查 sql 執行時間 
chk_sql_time  : x/30 x x x x

#檢查 table space
chk_tbs_time  : x/30 x x x x
chk_temp_time : x/30 x x x x 
chk_ttbs_time : x/30 x x x x
chk_undo_time : x/30 x x x x


" > ${set_file}


function myfunc {   
    eval ${i}_go="N"
    script_min=`cat $set_file | grep $1 | awk -F : '{print $2}' | awk '{print $1}' | sed 's/^[ \t]*//g'`
    script_hr=`cat $set_file | grep $1 | awk -F : '{print $2}' | awk '{print $2}' | sed 's/^[ \t]*//g'`
    script_day=`cat $set_file | grep $1 | awk -F : '{print $2}' | awk '{print $3}' | sed 's/^[ \t]*//g'`
    script_wek=`cat $set_file | grep $1 | awk -F : '{print $2}' | awk '{print $4}' | sed 's/^[ \t]*//g'`
    script_mon=`cat $set_file | grep $1 | awk -F : '{print $2}' | awk '{print $5}' | sed 's/^[ \t]*//g'`
    #echo "@@@ " $script_min
    if [ "$script_min" == "x" ] && 
       [ "$script_hr" == "x" ] && 
       [ "$script_day" == "x" ] && 
       [ "$script_wek" == "x" ] && 
       [ "$script_mon" == "x" ] ; then
       #echo "@ " 
       eval ${i}_go="N"
       return  #返回 function
    fi 
    #echo " chk "
    if [ "$script_min" != "x" ] &&
       [ "$script_hr" != "x" ] ; then
       chk_hr_run="Y"
    fi
    chk_script_min=` echo $script_min | grep "/" | wc -l `
    if [ $(echo "$chk_script_min > 0"|bc) -eq 1 ] ; then
       script_min=` echo $script_min | awk -F / '{print $2}' | sed 's/^[ \t#]*//g' `
       x=`expr 60 / $script_min `
       x=`expr $x + 1 `
       count=1
       while [ "$count" -lt $x ]
         do   
           num=`expr $script_min \* $count `
           if [ "$num" -gt 60 ] ; then
              count=`expr $count + $x`
           else
              if [ "$num" -eq 60 ] ; then
                 list_min='00'"|"$list_min
                 #echo $list_min
              else
                 if [ "$num" -gt 9 ] ; then
                    list_min=$list_min""$num"|"
                    #echo $list_min
                 else 
                    list_min=$list_min"0"$num"|"
                    #echo $list_min
                 fi
              fi
              count=`expr $count + 1`
           fi

         done
       list_min=`echo $list_min | sed 's/[|]$//g' `
       #echo $list_min
    else
       list_min=`echo $script_min`
       #echo $list_min
    fi
    if [ "$chk_hr_run" == "Y" ] ; then
       echo "" >> /dev/null
    else
       if [[ "$chk_min" =~ ^($list_min)$ ]] ; then
          eval ${i}_go="Y"
       fi
    fi
    
    chk_script_hr=` echo $script_hr | grep "/" | wc -l `
    if [ $(echo "$chk_script_hr > 0"|bc) -eq 1 ] ; then
       script_hr=` echo $script_hr | awk -F / '{print $2}' | sed 's/^[ \t#]*//g' `
       x=`expr 24 / $script_hr `
       x=`expr $x + 1 `
       count=1
       while [ "$count" -lt $x ]
         do
           num=`expr $script_hr \* $count `
           if [ "$num" -gt 24 ] ; then
              count=`expr $count + $x`
           else
              if [ "$num" -eq 24 ] ; then
                 list_hr='00'"|"$list_hr
                 #echo $list_hr
              else
                 if [ "$num" -gt 9 ] ; then 
                    list_hr=$list_hr""$num"|"
                    #echo $list_hr
                 else
                    list_hr=$list_hr"0"$num"|"
                    #echo $list_hr
                 fi
              fi
              count=`expr $count + 1`
           fi
         done
       list_hr=`echo $list_hr | sed 's/[|]$//g' `
       #echo $list_hr
    else
       list_hr=`echo $script_hr`
       #echo $list_hr
    fi
    if [ "$chk_hr_run" == "Y" ] ; then
       #list_min="00"
       if [[ "$chk_min" =~ ^($list_min)$ ]] ; then
          if [[ "$chk_hour" =~ ^($list_hr)$ ]] ; then
             eval ${i}_go="Y"
          fi
       fi
    else
       if [[ "$chk_hour" =~ ^($list_hr)$ ]] ; then
          eval ${i}_go="Y"
       fi
    fi
    w=`echo ${i}_go`
    echo $w ":"
    eval "echo \${$w} "

}

mode_test=$MODE_TEST

if [ "$mode_test" == "Y" ]; then 

   #echo "mode : "$mode_test
   echo ""

else
   script_name=`cat $set_file | awk -F : '{print $1}' | grep '^[[:blank:]]*[^[:blank:]#]' | sed 's/^[ \t]*//g' `
   echo "" > chk_script_time.txt
   for i in $script_name
   do
      myfunc $i  > fun_result.txt
      awk '{tmp=$0;getline;print tmp"\t"$0}' fun_result.txt  >> chk_script_time.txt
   
   done

fi

#sh ${set_file}/tmon_fun.sh $chk_min $chk_hour ${set_file}/tmon_time.txt


#Lock_Wait 排程設定
w_of_m_lk_set="0"
on_lk_set="00"
#CPU負載 排程設定
w_of_m_cpu_set="0"
on_cpu_set="00"
#記憶體 排程設定
w_of_m_mem_set="0"
on_mem_set="00"
#process記憶體使用量 排程設定
w_of_m_psmem_set="0"
on_psmem_set="00"
#process 執行時間過久 排程設定
w_of_m_ps_cputime_set="0"
on_ps_cputime_set="00"
#REDOLOG切換次數 排程設定
w_of_m_rd_set="0"
on_rd_set="Sat0000"
#表空間 排程設定
w_of_m_tbk_set="0"
on_tbk_set="00"
#temptabs空間 排程設定
w_of_m_ttbk_set="0"
on_ttbk_set="00"
#undo空間 排程設定
w_of_m_undok_set="0"
on_undok_set="00"
#temp表空間 排程設定
w_of_m_tempk_set="0"
on_tempk_set="00"
#磁碟空間 排程設定
w_of_m_du_set="0"
on_du_set="00"
#程式運行 排程設定
w_of_m_psk_set="0"
on_psk_set="00"

#檢查檔案目錄
dir_date=`date "+%Y%m%d"`
mon_logdir="/u3/log/mon_log"
chk_dir="/u3/log/mon_log/chk/"$dir_date
script_logdir="/u3/bin/tmon/script/basement"
